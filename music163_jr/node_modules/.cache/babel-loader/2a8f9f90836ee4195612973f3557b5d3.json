{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { getSongDetail, getSongPlayUrl } from '@/service/player';\nimport { getRandomNumber } from '@/utils/math-utils';\nimport { parseLyric } from '@/utils/parse-lyric'; // 歌曲详情Action\n\nconst changeCurrentSongAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res\n}); // 当前歌曲索引Action\n\n\nconst changeSongIndexAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  currentSongIndex: res\n}); // 歌曲列表Action\n\n\nconst changePlayListAction = res => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList: res\n}); // 改变歌曲数量\n\n\nconst changePlayListCount = res => ({\n  type: actionTypes.CHANGE_PLAY_LIST_COUNT,\n  playListCount: res\n}); // 首次加载Action\n\n\nexport const changeFirstLoad = res => ({\n  type: actionTypes.CHANGE_FIRST_LOAD,\n  firstLoad: res\n}); // 获取歌曲详情\n\nexport const getSongDetailAction = id => {\n  return (dispatch, getState) => {\n    // 1、根据id查找palyList里是否有该歌曲\n    const playList = getState().player.playList;\n    const songIndex = playList.findIndex(song => song.id === id);\n\n    if (songIndex !== -1) {\n      // 2、找到歌曲\n      dispatch(changeSongIndexAction(songIndex));\n      dispatch(changeCurrentSongAction(playList[songIndex]));\n      dispatch(changeCurrentSongPlayUrlAction(id));\n    } else {\n      // 3、没找到歌曲\n      // 请求数据\n      getSongDetail(id).then(res => {\n        const song = res.songs && res.songs[0];\n        playList.push(song); // (1)添加到播放列表中\n\n        dispatch(changePlayListAction(playList));\n        let songIndex = playList.length - 1; // (2)更改当前播放的索引\n\n        dispatch(changeSongIndexAction(songIndex)); // (3)更改当前播放歌曲\n\n        dispatch(changeCurrentSongAction(playList[songIndex])); // (4)更改当前播放歌曲url\n\n        dispatch(changeCurrentSongPlayUrlAction(id)); // (5)更新歌曲数量\n\n        dispatch(changePlayListCount(playList.length));\n      });\n    }\n  };\n}; // 歌曲音乐播放urlAction\n\nconst changeCurrentSongPlayUrlAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_PLAY_URL,\n  currentSongPlayUrl: res.data && res.data[0]\n});\n\nexport const getSongPlayUrlAction = id => {\n  return dispatch => {\n    getSongPlayUrl(id).then(res => {\n      dispatch(changeCurrentSongPlayUrlAction(res));\n    });\n  };\n}; // 更改播放顺序Action\n\nexport const changePlaySequenceAction = res => ({\n  type: actionTypes.CHANGE_PLAY_SEQUENCE,\n  playSequence: res\n}); // 切换歌曲Action\n\nexport const changeCurrentIndexAndSongAction = tag => {\n  return (dispatch, getState) => {\n    // 根据playSequence决定是顺序播放还是随机播放\n    const playSequence = getState().player.playSequence; // 播放列表\n\n    const playList = getState().player.playList; // 当前播放的索引/下标\n\n    let currentSongIndex = getState().player.currentSongIndex; // 根据播放顺序选择下一首音乐\n\n    switch (playSequence) {\n      case 1:\n        // 随机播放\n        let random = getRandomNumber(playList.length);\n\n        while (random === currentSongIndex) {\n          random = getRandomNumber(playList.length);\n        } // 更改当前播放音乐的下标\n\n\n        currentSongIndex = random;\n        break;\n\n      default:\n        // 顺序播放\n        currentSongIndex += tag; // 判断当前音乐的下标是否超出播放列表长度\n\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n    } // 获取需要播放的音乐\n\n\n    const song = playList[currentSongIndex]; // 更改当前播放的音乐\n\n    dispatch(changeCurrentSongAction(song));\n    dispatch(changeSongIndexAction(currentSongIndex));\n    dispatch(changeCurrentSongPlayUrlAction(song.id));\n  };\n}; // 改变歌词Action\n\nconst changeLyricAction = res => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList: res\n});","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/pages/player/store/actionCreator.js"],"names":["actionTypes","getSongDetail","getSongPlayUrl","getRandomNumber","parseLyric","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","changeSongIndexAction","CHANGE_CURRENT_SONG_INDEX","currentSongIndex","changePlayListAction","CHANGE_PLAY_LIST","playList","changePlayListCount","CHANGE_PLAY_LIST_COUNT","playListCount","changeFirstLoad","CHANGE_FIRST_LOAD","firstLoad","getSongDetailAction","id","dispatch","getState","player","songIndex","findIndex","song","changeCurrentSongPlayUrlAction","then","songs","push","length","CHANGE_CURRENT_SONG_PLAY_URL","currentSongPlayUrl","data","getSongPlayUrlAction","changePlaySequenceAction","CHANGE_PLAY_SEQUENCE","playSequence","changeCurrentIndexAndSongAction","tag","random","changeLyricAction","CHANGE_LYRIC_LIST","lyricList"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport {getSongDetail,\n        getSongPlayUrl,} from '@/service/player';\nimport { getRandomNumber } from '@/utils/math-utils'\nimport { parseLyric } from '@/utils/parse-lyric'\n\n// 歌曲详情Action\nconst changeCurrentSongAction = res =>({\n    type:actionTypes.CHANGE_CURRENT_SONG,\n    currentSong:res\n})\n// 当前歌曲索引Action\nconst changeSongIndexAction = res =>({\n    type:actionTypes.CHANGE_CURRENT_SONG_INDEX,\n    currentSongIndex:res\n})\n// 歌曲列表Action\nconst changePlayListAction = res =>({\n    type:actionTypes.CHANGE_PLAY_LIST,\n    playList:res\n})\n\n// 改变歌曲数量\nconst changePlayListCount = res => ({\n    type: actionTypes.CHANGE_PLAY_LIST_COUNT,\n    playListCount:res\n})\n\n\n// 首次加载Action\nexport const changeFirstLoad = res => ({\n    type: actionTypes.CHANGE_FIRST_LOAD,\n    firstLoad: res\n})\n\n// 获取歌曲详情\nexport const getSongDetailAction = (id) =>{\n    return (dispatch,getState) => {\n        // 1、根据id查找palyList里是否有该歌曲\n        const playList = getState().player.playList;\n        const songIndex = playList.findIndex(song => song.id===id);\n        \n        if(songIndex !== -1){\n            // 2、找到歌曲\n            dispatch(changeSongIndexAction(songIndex));\n            dispatch(changeCurrentSongAction(playList[songIndex]));\n            dispatch(changeCurrentSongPlayUrlAction(id));\n\n        }else{\n            // 3、没找到歌曲\n            // 请求数据\n            getSongDetail(id).then(res => {\n                const song = res.songs && res.songs[0];\n                playList.push(song);\n                // (1)添加到播放列表中\n                dispatch(changePlayListAction(playList));\n                let songIndex = playList.length-1;\n                // (2)更改当前播放的索引\n                dispatch(changeSongIndexAction(songIndex));\n                // (3)更改当前播放歌曲\n                dispatch(changeCurrentSongAction(playList[songIndex]));\n                // (4)更改当前播放歌曲url\n                dispatch(changeCurrentSongPlayUrlAction(id));\n                // (5)更新歌曲数量\n                dispatch(changePlayListCount(playList.length));\n            });\n\n        }\n    }\n}\n\n// 歌曲音乐播放urlAction\nconst changeCurrentSongPlayUrlAction = res => ({\n    type:actionTypes.CHANGE_CURRENT_SONG_PLAY_URL,\n    currentSongPlayUrl:res.data && res.data[0]\n})\n\nexport const getSongPlayUrlAction = id =>{\n    return dispatch => {\n        getSongPlayUrl(id).then((res) => {\n            dispatch(changeCurrentSongPlayUrlAction(res));\n        });\n    }\n}\n\n// 更改播放顺序Action\nexport const changePlaySequenceAction = (res) => ({\n    type: actionTypes.CHANGE_PLAY_SEQUENCE,\n    playSequence:res\n})\n\n// 切换歌曲Action\nexport const changeCurrentIndexAndSongAction = (tag) =>{\n    return (dispatch,getState) => {\n        // 根据playSequence决定是顺序播放还是随机播放\n        const playSequence = getState().player.playSequence;\n        // 播放列表\n        const playList = getState().player.playList;\n        // 当前播放的索引/下标\n        let currentSongIndex = getState().player.currentSongIndex;\n\n        // 根据播放顺序选择下一首音乐\n        switch(playSequence){\n            case 1: \n                // 随机播放\n                let random = getRandomNumber(playList.length)\n                while (random === currentSongIndex) {\n                    random = getRandomNumber(playList.length)\n                }\n                // 更改当前播放音乐的下标\n                currentSongIndex = random\n                break;\n            default:\n                // 顺序播放\n                currentSongIndex += tag\n                // 判断当前音乐的下标是否超出播放列表长度\n                if (currentSongIndex >= playList.length) currentSongIndex = 0;\n                if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n        }\n        // 获取需要播放的音乐\n        const song = playList[currentSongIndex];\n        // 更改当前播放的音乐\n        dispatch(changeCurrentSongAction(song));\n        dispatch(changeSongIndexAction(currentSongIndex))\n        dispatch(changeCurrentSongPlayUrlAction(song.id));\n    }\n}\n\n// 改变歌词Action\nconst changeLyricAction = (res) => ({\n    type: actionTypes.CHANGE_LYRIC_LIST,\n    lyricList:res\n})\n\n\n"]},"metadata":{},"sourceType":"module"}