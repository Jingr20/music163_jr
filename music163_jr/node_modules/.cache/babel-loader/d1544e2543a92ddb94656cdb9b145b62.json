{"ast":null,"code":"import CryptoJS from 'crypto-js';\nimport { secretKey } from '@/config/token.js';\nimport { message } from 'antd';\n/**\n * 加密信息,本地存储\n * @param {String} key 本地存储key\n * @param {Object} info 用户信息\n */\n\nexport async function setLoginInfo(key, info) {\n  if (key.length && JSON.stringify(info) !== '{}') {\n    // 1.要存储的值  2.加密的秘钥（解密的时候必须要根据秘钥才能解密）\n    let cipherText = CryptoJS.AES.encrypt(JSON.stringify(info), secretKey).toString();\n    cipherText = cipherText.replaceAll('\\n', \"\"); //将换行符替换为空\n\n    localStorage.setItem(key, cipherText); //本地存储\n\n    return true;\n  } else {\n    message.error('网络异常, 请稍后重试');\n    return false;\n  }\n}\n/**\n * 取出加密后的信息\n * @param {String} key 本地存储key\n */\n\nexport function getLoginInfo(key) {\n  if (key.length) {\n    /* 取出加密后的value */\n    let tk = localStorage.getItem(key); //把存储的值取出\n\n    let bytes = CryptoJS.AES.decrypt(tk, secretKey);\n    let originalText = bytes.toString(CryptoJS.enc.Utf8); //解密操作\n\n    return JSON.parse(originalText);\n  }\n}\n/**\n * 清除登录状态\n */\n\nexport function clearLoginState() {\n  localStorage.clear();\n  window.location.reload();\n}","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/utils/secret-key.js"],"names":["CryptoJS","secretKey","message","setLoginInfo","key","info","length","JSON","stringify","cipherText","AES","encrypt","toString","replaceAll","localStorage","setItem","error","getLoginInfo","tk","getItem","bytes","decrypt","originalText","enc","Utf8","parse","clearLoginState","clear","window","location","reload"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,YAAf,CAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AAC5C,MAAID,GAAG,CAACE,MAAJ,IAAcC,IAAI,CAACC,SAAL,CAAeH,IAAf,MAAyB,IAA3C,EAAiD;AAC/C;AACA,QAAII,UAAU,GAAGT,QAAQ,CAACU,GAAT,CAAaC,OAAb,CACfJ,IAAI,CAACC,SAAL,CAAeH,IAAf,CADe,EAEfJ,SAFe,EAGfW,QAHe,EAAjB;AAIAH,IAAAA,UAAU,GAAGA,UAAU,CAACI,UAAX,CAAsB,IAAtB,EAA4B,EAA5B,CAAb,CAN+C,CAMF;;AAC7CC,IAAAA,YAAY,CAACC,OAAb,CAAqBX,GAArB,EAA0BK,UAA1B,EAP+C,CAOR;;AACvC,WAAO,IAAP;AACD,GATD,MASO;AACLP,IAAAA,OAAO,CAACc,KAAR,CAAc,aAAd;AACA,WAAO,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBb,GAAtB,EAA2B;AAChC,MAAIA,GAAG,CAACE,MAAR,EAAgB;AACd;AACA,QAAIY,EAAE,GAAGJ,YAAY,CAACK,OAAb,CAAqBf,GAArB,CAAT,CAFc,CAEsB;;AACpC,QAAIgB,KAAK,GAAGpB,QAAQ,CAACU,GAAT,CAAaW,OAAb,CAAqBH,EAArB,EAAyBjB,SAAzB,CAAZ;AACA,QAAIqB,YAAY,GAAGF,KAAK,CAACR,QAAN,CAAeZ,QAAQ,CAACuB,GAAT,CAAaC,IAA5B,CAAnB,CAJc,CAIwC;;AACtD,WAAOjB,IAAI,CAACkB,KAAL,CAAWH,YAAX,CAAP;AACD;AACF;AAED;AACA;AACA;;AACA,OAAO,SAASI,eAAT,GAA2B;AAChCZ,EAAAA,YAAY,CAACa,KAAb;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD","sourcesContent":["import CryptoJS from 'crypto-js';\nimport { secretKey } from '@/config/token.js';\nimport { message } from 'antd';\n\n/**\n * 加密信息,本地存储\n * @param {String} key 本地存储key\n * @param {Object} info 用户信息\n */\nexport async function setLoginInfo(key, info) {\n  if (key.length && JSON.stringify(info) !== '{}') {\n    // 1.要存储的值  2.加密的秘钥（解密的时候必须要根据秘钥才能解密）\n    let cipherText = CryptoJS.AES.encrypt(\n      JSON.stringify(info),\n      secretKey\n    ).toString();\n    cipherText = cipherText.replaceAll('\\n', \"\");//将换行符替换为空\n    localStorage.setItem(key, cipherText); //本地存储\n    return true;\n  } else {\n    message.error('网络异常, 请稍后重试');\n    return false;\n  }\n}\n\n/**\n * 取出加密后的信息\n * @param {String} key 本地存储key\n */\nexport function getLoginInfo(key) {\n  if (key.length) {\n    /* 取出加密后的value */\n    let tk = localStorage.getItem(key); //把存储的值取出\n    let bytes = CryptoJS.AES.decrypt(tk, secretKey);\n    let originalText = bytes.toString(CryptoJS.enc.Utf8); //解密操作\n    return JSON.parse(originalText);\n  }\n}\n\n/**\n * 清除登录状态\n */\nexport function clearLoginState() {\n  localStorage.clear()\n  window.location.reload()\n}\n"]},"metadata":{},"sourceType":"module"}