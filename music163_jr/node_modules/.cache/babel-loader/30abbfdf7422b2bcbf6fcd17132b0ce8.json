{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { getSongDetail, getSongPlayUrl } from '@/service/player'; // 歌曲详情Action\n\nconst changeCurrentSongAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res\n}); // 当前歌曲索引Action\n\n\nconst changeSongIndexAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  currentSongIndex: res\n}); // 歌曲列表Action\n\n\nconst changePlayListAction = res => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList: res\n}); // 改变歌曲数量\n\n\nconst changePlayListCount = res => ({\n  type: actionType.CHANGE_PLAY_LIST_COUNT,\n  playListCount: res\n});\n\nexport const getSongDetailAction = id => {\n  return (dispatch, getState) => {\n    // 1、根据id查找palyList里是否有该歌曲\n    const playList = getState().player.playList;\n    const songIndex = playList.findIndex(song => song.id === id);\n\n    if (songIndex !== -1) {\n      // 2、找到歌曲\n      dispatch(changeSongIndexAction(songIndex));\n      dispatch(changeCurrentSongAction(playList[songIndex]));\n      dispatch(changeCurrentSongPlayUrlAction(id));\n    } else {\n      // 3、没找到歌曲\n      // 请求数据\n      getSongDetail(id).then(res => {\n        const song = res.songs && res.songs[0];\n        playList.push(song); // (1)添加到播放列表中\n\n        dispatch(changePlayListAction(playList));\n        let songIndex = playList.length - 1; // (2)更改当前播放的索引\n\n        dispatch(changeSongIndexAction(songIndex)); // (3)更改当前播放歌曲\n\n        dispatch(changeCurrentSongAction(playList[songIndex])); // (4)更改当前播放歌曲url\n\n        dispatch(changeCurrentSongPlayUrlAction(id)); // (5)更新歌曲数量\n\n        dispatch(changePlayListCount(playList.length));\n      });\n    }\n  };\n}; // 歌曲音乐播放urlAction\n\nconst changeCurrentSongPlayUrlAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_PLAY_URL,\n  currentSongPlayUrl: res.data && res.data[0]\n});\n\nexport const getSongPlayUrlAction = id => {\n  return dispatch => {\n    getSongPlayUrl(id).then(res => {\n      dispatch(changeCurrentSongPlayUrlAction(res));\n    });\n  };\n}; // 更改播放顺序Action\n\nexport const changePlaySequenceAction = res => ({\n  type: actionTypes.CHANGE_PLAY_SEQUENCE,\n  playSequence: res\n});","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/pages/player/store/actionCreator.js"],"names":["actionTypes","getSongDetail","getSongPlayUrl","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","changeSongIndexAction","CHANGE_CURRENT_SONG_INDEX","currentSongIndex","changePlayListAction","CHANGE_PLAY_LIST","playList","changePlayListCount","actionType","CHANGE_PLAY_LIST_COUNT","playListCount","getSongDetailAction","id","dispatch","getState","player","songIndex","findIndex","song","changeCurrentSongPlayUrlAction","then","songs","push","length","CHANGE_CURRENT_SONG_PLAY_URL","currentSongPlayUrl","data","getSongPlayUrlAction","changePlaySequenceAction","CHANGE_PLAY_SEQUENCE","playSequence"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport {getSongDetail,\n        getSongPlayUrl,} from '@/service/player';\n\n// 歌曲详情Action\nconst changeCurrentSongAction = res =>({\n    type:actionTypes.CHANGE_CURRENT_SONG,\n    currentSong:res\n})\n// 当前歌曲索引Action\nconst changeSongIndexAction = res =>({\n    type:actionTypes.CHANGE_CURRENT_SONG_INDEX,\n    currentSongIndex:res\n})\n// 歌曲列表Action\nconst changePlayListAction = res =>({\n    type:actionTypes.CHANGE_PLAY_LIST,\n    playList:res\n})\n\n// 改变歌曲数量\nconst changePlayListCount = res => ({\n    type: actionType.CHANGE_PLAY_LIST_COUNT,\n    playListCount:res\n})\n\nexport const getSongDetailAction = (id) =>{\n    return (dispatch,getState) => {\n        // 1、根据id查找palyList里是否有该歌曲\n        const playList = getState().player.playList;\n        const songIndex = playList.findIndex(song => song.id===id);\n        \n        if(songIndex !== -1){\n            // 2、找到歌曲\n            dispatch(changeSongIndexAction(songIndex));\n            dispatch(changeCurrentSongAction(playList[songIndex]));\n            dispatch(changeCurrentSongPlayUrlAction(id));\n\n        }else{\n            // 3、没找到歌曲\n            // 请求数据\n            getSongDetail(id).then(res => {\n                const song = res.songs && res.songs[0];\n                playList.push(song);\n                // (1)添加到播放列表中\n                dispatch(changePlayListAction(playList));\n                let songIndex = playList.length-1;\n                // (2)更改当前播放的索引\n                dispatch(changeSongIndexAction(songIndex));\n                // (3)更改当前播放歌曲\n                dispatch(changeCurrentSongAction(playList[songIndex]));\n                // (4)更改当前播放歌曲url\n                dispatch(changeCurrentSongPlayUrlAction(id));\n                // (5)更新歌曲数量\n                dispatch(changePlayListCount(playList.length));\n            });\n\n        }\n    }\n}\n\n// 歌曲音乐播放urlAction\nconst changeCurrentSongPlayUrlAction = res => ({\n    type:actionTypes.CHANGE_CURRENT_SONG_PLAY_URL,\n    currentSongPlayUrl:res.data && res.data[0]\n})\n\nexport const getSongPlayUrlAction = id =>{\n    return dispatch => {\n        getSongPlayUrl(id).then((res) => {\n            dispatch(changeCurrentSongPlayUrlAction(res));\n        });\n    }\n}\n\n// 更改播放顺序Action\nexport const changePlaySequenceAction = (res) => ({\n    type: actionTypes.CHANGE_PLAY_SEQUENCE,\n    playSequence:res\n})\n\n\n"]},"metadata":{},"sourceType":"module"}