{"ast":null,"code":"var _jsxFileName = \"/Users/jr/myWeb/React\\u9879\\u76EE\\u5B9E\\u6218/music163_jr/src/pages/player/app-player-bar/index.js\",\n    _s = $RefreshSig$();\n\nimport { PlayerbarWrapper, PlayerInfo, Control, Operator } from './style';\nimport { Slider, Tooltip } from 'antd';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useEffect, useState, useRef } from 'react';\nimport { getSongDetailAction, getSongPlayUrlAction } from '../store/actionCreator';\nimport { getSizeImage, formatDate } from '@/utils/format-utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppPlayerBar() {\n  _s();\n\n  console.log('AppPlayerBar组件渲染'); // 获取store中的数据\n\n  const {\n    currentSong,\n    currentSongPlayUrl\n  } = useSelector(state => ({\n    currentSong: state.player.currentSong,\n    currentSongPlayUrl: state.player.currentSongPlayUrl,\n    currentSongIndex: state.player.currentSongIndex,\n    playList: state.player.playList\n  }), shallowEqual); // 组件内state\n\n  const [isPlaying, setIsPlaying] = useState(false); // 是否正在播放\n\n  const [currentTime, setCurrentTime] = useState(0); // 当前播放的时间\n\n  const [progress, setProgress] = useState(0); // 滑动条进度\n\n  const [isChanging, setIsChanging] = useState(false); // 是否正在滑动\n  //发送网络请求，请求歌曲详情\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    console.log('请求歌曲详情');\n    dispatch(getSongDetailAction(167876));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  // 判断当前是否拿到currentSong的数据（第一次渲染还未拿到异步数据）\n\n  const picUrl = currentSong.al && currentSong.al.picUrl; // 图片url\n\n  const songName = currentSong.name; // 歌曲名字\n\n  const singerName = currentSong.ar && currentSong.ar[0].name; //作者名字\n\n  const duration = currentSong.dt; //播放总时间\n\n  const songPlayUrl = currentSongPlayUrl.url; //音乐播放URL\n  // 利用ref获取DOM元素\n\n  const audioRef = useRef();\n  /***** 设置音频src ****/\n\n  useEffect(() => {\n    console.log('设置音频******');\n\n    if (currentSong.id) {\n      dispatch(getSongPlayUrlAction(currentSong.id));\n    }\n  }, [currentSong]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /***** 点击播放/暂停音乐 ****/\n\n  function playMusic() {\n    // 更改状态\n    setIsPlaying(!isPlaying);\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\n  }\n  /***** 音乐播放时更新歌曲播放时间currentTime、slider进程 ****/\n\n\n  function timeUpdate(e) {\n    console.log(e.target.currentTime);\n    let currentTime = e.target.currentTime;\n\n    if (!isChanging) {\n      console.log('音乐播放时更新歌曲播放时间currentTime、slider进程');\n      setCurrentTime(currentTime * 1000);\n      setProgress(currentTime * 1000 / duration * 100);\n    }\n  }\n  /***** 滑动滑块时触发 ****/\n\n\n  function sliderChange(value) {\n    console.log('滑动滑块时更新currentTime、slider进程');\n    setIsChanging(true);\n    const currentTime = value / 100 * duration;\n    setCurrentTime(currentTime);\n    setProgress(value);\n  }\n  /***** 手指抬起时触发 ****/\n\n\n  function slideAfterChange(value) {\n    console.log('手指抬起时更新audio的currentTime');\n    setIsChanging(false);\n    const currentTime = value / 100 * duration / 1000;\n    audioRef.current.currentTime = currentTime;\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerbarWrapper, {\n    className: \"sprite_player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Control, {\n        isPlaying: isPlaying,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_player pre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_player play\",\n          onClick: playMusic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_player next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#/discover/song\",\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: getSizeImage(picUrl, 35),\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"play-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"song-name\",\n              href: \"#/discover/song\",\n              children: songName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"song-author\",\n              href: \"#/author\",\n              children: singerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            value: progress,\n            onChange: sliderChange,\n            onAfterChange: slideAfterChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song-time\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"now-time\",\n              children: formatDate(currentTime, 'mm:ss')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total-time\",\n              children: [' ', \"/ \", duration && formatDate(duration, 'mm:ss')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Operator, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"\\u8C03\\u8282\\u97F3\\u91CF\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"sprite_player btn volume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: ['顺序播放', '随机播放', '单曲循环'].filter((item, index) => index === 0),\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"sprite_player btn loop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"\\u64AD\\u653E\\u5217\\u8868\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"sprite_player btn playlist\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"audio\",\n      ref: audioRef,\n      src: songPlayUrl,\n      onTimeUpdate: timeUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppPlayerBar, \"AfNysp3ZVUGcVOTYNYvSgp4gLxc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AppPlayerBar;\nexport default AppPlayerBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppPlayerBar\");","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/pages/player/app-player-bar/index.js"],"names":["PlayerbarWrapper","PlayerInfo","Control","Operator","Slider","Tooltip","useDispatch","useSelector","shallowEqual","useEffect","useState","useRef","getSongDetailAction","getSongPlayUrlAction","getSizeImage","formatDate","AppPlayerBar","console","log","currentSong","currentSongPlayUrl","state","player","currentSongIndex","playList","isPlaying","setIsPlaying","currentTime","setCurrentTime","progress","setProgress","isChanging","setIsChanging","dispatch","picUrl","al","songName","name","singerName","ar","duration","dt","songPlayUrl","url","audioRef","id","playMusic","current","pause","play","timeUpdate","e","target","sliderChange","value","slideAfterChange","filter","item","index"],"mappings":"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","sourcesContent":["import {PlayerbarWrapper,PlayerInfo,Control,Operator} from './style';\nimport {Slider,Tooltip} from 'antd';\nimport {useDispatch,useSelector,shallowEqual} from 'react-redux';\nimport {useEffect,useState,useRef} from 'react';\nimport {getSongDetailAction,getSongPlayUrlAction} from '../store/actionCreator';\nimport {getSizeImage, formatDate} from '@/utils/format-utils.js';\n\nfunction AppPlayerBar(){\n    console.log('AppPlayerBar组件渲染');\n\n    // 获取store中的数据\n    const {currentSong,currentSongPlayUrl} = useSelector((state)=>({\n        currentSong: state.player.currentSong,\n        currentSongPlayUrl: state.player.currentSongPlayUrl,\n        currentSongIndex: state.player.currentSongIndex,\n        playList: state.player.playList\n    }),shallowEqual); \n\n    // 组件内state\n    const [isPlaying,setIsPlaying] = useState(false); // 是否正在播放\n    const [currentTime,setCurrentTime] = useState(0);  // 当前播放的时间\n    const [progress,setProgress] = useState(0);  // 滑动条进度\n    const [isChanging, setIsChanging] = useState(false); // 是否正在滑动\n\n\n    //发送网络请求，请求歌曲详情\n    const dispatch = useDispatch();\n    useEffect(()=>{\n        console.log('请求歌曲详情');\n        dispatch(getSongDetailAction(167876));\n    },[]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n    // 判断当前是否拿到currentSong的数据（第一次渲染还未拿到异步数据）\n    const picUrl = currentSong.al && currentSong.al.picUrl; // 图片url\n    const songName = currentSong.name; // 歌曲名字\n    const singerName = currentSong.ar && currentSong.ar[0].name; //作者名字\n    const duration = currentSong.dt; //播放总时间\n    const songPlayUrl = currentSongPlayUrl.url; //音乐播放URL\n    \n    // 利用ref获取DOM元素\n    const audioRef = useRef();\n\n\n    /***** 设置音频src ****/\n    useEffect(()=>{\n        console.log('设置音频******');\n        if(currentSong.id){\n            dispatch(getSongPlayUrlAction(currentSong.id));\n        }\n    },[currentSong]);// eslint-disable-line react-hooks/exhaustive-deps\n\n\n    /***** 点击播放/暂停音乐 ****/\n    function playMusic(){\n        // 更改状态\n        setIsPlaying(!isPlaying);\n        isPlaying ? audioRef.current.pause() : audioRef.current.play();\n    }\n\n    /***** 音乐播放时更新歌曲播放时间currentTime、slider进程 ****/\n    function timeUpdate(e){\n        console.log(e.target.currentTime);\n        let currentTime = e.target.currentTime;\n        if(!isChanging){\n            console.log('音乐播放时更新歌曲播放时间currentTime、slider进程');\n            setCurrentTime(currentTime*1000);\n            setProgress(((currentTime * 1000) / duration) * 100);   \n        }     \n    }\n\n    /***** 滑动滑块时触发 ****/\n    function sliderChange(value){\n        console.log('滑动滑块时更新currentTime、slider进程');\n        setIsChanging(true);\n        const currentTime = (value / 100) * duration;\n        setCurrentTime(currentTime);\n        setProgress(value);\n\n    }\n    /***** 手指抬起时触发 ****/\n    function slideAfterChange(value){\n        console.log('手指抬起时更新audio的currentTime');\n        setIsChanging(false);\n        const currentTime = ((value / 100) * duration) / 1000;\n        audioRef.current.currentTime = currentTime;\n    }\n\n    \n    return (\n        <PlayerbarWrapper className='sprite_player'>\n            <div className='content'>\n                <Control isPlaying={isPlaying}>\n                    <button className='sprite_player pre'></button>\n                    <button className='sprite_player play' onClick={playMusic}></button>\n                    <button className='sprite_player next'></button>\n                </Control>\n                <PlayerInfo>\n                    <a href='#/discover/song' className='image'>\n                        <img src={getSizeImage(picUrl, 35)} alt=''/>\n                    </a>\n                    <div className='play-detail'>\n                        <div className='song-info'>\n                            <a className='song-name' href='#/discover/song'>{songName}</a>\n                            <a className='song-author' href='#/author'>{singerName}</a>\n                        </div>\n                        <Slider\n                            value={progress}\n                            onChange={sliderChange}\n                            onAfterChange={slideAfterChange}\n                        />\n                        <div className='song-time'>\n                            <span className='now-time'>{formatDate(currentTime, 'mm:ss')}</span>\n                            <span className='total-time'>\n                                {' '}\n                                / {duration && formatDate(duration, 'mm:ss')}\n                            </span>\n                        </div>\n                    </div>\n                </PlayerInfo>\n                <Operator>\n                    {/* 左侧暂时不实现 */}\n                    <div className='left'></div>\n                    <div className='right'>\n                        <Tooltip title='调节音量'>\n                            <button className='sprite_player btn volume'></button>\n                        </Tooltip>\n                        <Tooltip\n                            title={['顺序播放','随机播放','单曲循环'].filter((item,index)=>(\n                                index === 0\n                            ))}\n                        >\n                            <button className='sprite_player btn loop'></button>\n                        </Tooltip>\n                        <Tooltip title='播放列表'>\n                            <button className='sprite_player btn playlist'>\n                                <span>9</span>\n                            </button>\n                        </Tooltip>\n                    </div>\n                </Operator>\n            </div>\n            <audio\n                id=\"audio\"\n                ref={audioRef}\n                src={songPlayUrl}\n                onTimeUpdate={timeUpdate}\n            />\n        </PlayerbarWrapper>\n    );\n}\n\nexport default AppPlayerBar;"]},"metadata":{},"sourceType":"module"}