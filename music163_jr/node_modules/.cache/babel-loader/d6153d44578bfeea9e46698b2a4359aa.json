{"ast":null,"code":"// import { address } from \"../common/local-data\"\n\n/**\n * 对数字进行格式化\n * @param {number} count\n */\nexport function getCount(count) {\n  if (count < 0) return;\n\n  if (count < 10000) {\n    return count;\n  } else if (Math.floor(count / 10000) < 10000) {\n    return Math.floor(count / 1000) / 10 + '万';\n  } else {\n    return Math.floor(count / 10000000) / 10 + '亿';\n  }\n}\nexport function getSizeImage(imgUrl, size) {\n  return `${imgUrl}?param=${size}x${size}`;\n}\nexport function formatDate(time, fmt) {\n  let date = new Date(time);\n\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n\n  let o = {\n    'M+': date.getMonth() + 1,\n    'd+': date.getDate(),\n    'h+': date.getHours(),\n    'm+': date.getMinutes(),\n    's+': date.getSeconds()\n  };\n\n  for (let k in o) {\n    if (new RegExp(`(${k})`).test(fmt)) {\n      let str = o[k] + '';\n      fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? str : padLeftZero(str));\n    }\n  }\n\n  return fmt;\n}\n\nfunction padLeftZero(str) {\n  return ('00' + str).substr(str.length);\n}\n\nexport function formatMonthDay(time) {\n  return formatDate(time, 'MM月dd日');\n}\nexport function formatMinuteSecond(time) {\n  return formatDate(time, 'mm:ss');\n}\nexport function getPlayUrl(id) {\n  return `http://localhost:4000/song/media/outer/url?id=${id}.m4a`;\n} // 函数防抖: 解决refresh频繁刷新\n\nexport function debounce(func, delay) {\n  let timer = null;\n  return function (...args) {\n    if (timer) clearInterval(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n/**\n *\n * @param {String} loginState 登录模式\n */\n\nexport function getParseLoginState(loginState) {\n  let loginMode = '';\n\n  switch (loginState) {\n    case 'phone':\n      loginMode = '手机号';\n      break;\n\n    case 'email':\n      loginMode = '邮箱';\n      break;\n\n    default:\n      loginMode = '手机号';\n      break;\n  }\n\n  return loginMode;\n}\n/**\n * 根据不同登录方式,返回匹配对应的正则\n * @param {String} loginState 登录状态\n */\n\nexport function getMatchReg(loginState) {\n  switch (loginState) {\n    case 'phone':\n      return /^(?:(?:\\+|00)86)?1[3-9]\\d{9}$/;\n\n    case 'email':\n      return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    default:\n      return '';\n  }\n}\n/**\n * 获取url参数\n * @param name 参数名\n */\n\nexport function getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  const search = url.substring(url.lastIndexOf('?') + 1);\n  const obj = {};\n  const reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, (rs, $1, $2) => {\n    const name = decodeURIComponent($1);\n    let val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n/**\n * 格式化时间\n * @param str\n * @returns {string}\n * {y}-{m}-{d} {h}:{i}:{s}\n */\n\nexport function parseTime(time, cFormat) {\n  if (!time || arguments.length === 0) return null;\n  const format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';\n  let date;\n\n  if (typeof time === 'object') {\n    date = time;\n  } else {\n    if (`${time}`.length === 10) time = parseInt(time, 10) * 1000;\n    date = new Date(time);\n  }\n\n  const formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  }; // eslint-disable-next-line camelcase\n\n  const time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {\n    let value = formatObj[key]; // Note: getDay() returns 0 on Sunday\n\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value];\n    }\n\n    if (result.length > 0 && value < 10) {\n      value = `0${value}`;\n    }\n\n    return value || 0;\n  }); // eslint-disable-next-line camelcase\n\n  return time_str;\n} // export function getCity(id) {\n//   return address[id]\n// }","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/utils/format-utils.js"],"names":["getCount","count","Math","floor","getSizeImage","imgUrl","size","formatDate","time","fmt","date","Date","test","replace","RegExp","$1","getFullYear","substr","length","o","getMonth","getDate","getHours","getMinutes","getSeconds","k","str","padLeftZero","formatMonthDay","formatMinuteSecond","getPlayUrl","id","debounce","func","delay","timer","args","clearInterval","setTimeout","apply","getParseLoginState","loginState","loginMode","getMatchReg","getQueryObject","url","window","location","href","search","substring","lastIndexOf","obj","reg","rs","$2","name","decodeURIComponent","val","String","parseTime","cFormat","arguments","format","parseInt","formatObj","y","m","d","h","i","s","a","getDay","time_str","result","key","value"],"mappings":"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","sourcesContent":["// import { address } from \"../common/local-data\"\n\n/**\n * 对数字进行格式化\n * @param {number} count\n */\nexport function getCount(count) {\n  if (count < 0) return\n  if (count < 10000) {\n    return count\n  } else if (Math.floor(count / 10000) < 10000) {\n    return Math.floor(count / 1000) / 10 + '万'\n  } else {\n    return Math.floor(count / 10000000) / 10 + '亿'\n  }\n}\n\nexport function getSizeImage(imgUrl, size) {\n  return `${imgUrl}?param=${size}x${size}`\n}\n\nexport function formatDate(time, fmt) {\n  let date = new Date(time)\n\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(\n      RegExp.$1,\n      (date.getFullYear() + '').substr(4 - RegExp.$1.length)\n    )\n  }\n  let o = {\n    'M+': date.getMonth() + 1,\n    'd+': date.getDate(),\n    'h+': date.getHours(),\n    'm+': date.getMinutes(),\n    's+': date.getSeconds(),\n  }\n  for (let k in o) {\n    if (new RegExp(`(${k})`).test(fmt)) {\n      let str = o[k] + ''\n      fmt = fmt.replace(\n        RegExp.$1,\n        RegExp.$1.length === 1 ? str : padLeftZero(str)\n      )\n    }\n  }\n  return fmt\n}\n\nfunction padLeftZero(str) {\n  return ('00' + str).substr(str.length)\n}\n\nexport function formatMonthDay(time) {\n  return formatDate(time, 'MM月dd日')\n}\n\nexport function formatMinuteSecond(time) {\n  return formatDate(time, 'mm:ss')\n}\n\nexport function getPlayUrl(id) {\n  return `http://localhost:4000/song/media/outer/url?id=${id}.m4a`\n}\n\n// 函数防抖: 解决refresh频繁刷新\nexport function debounce(func, delay) {\n  let timer = null\n  return function (...args) {\n    if (timer) clearInterval(timer)\n    timer = setTimeout(() => {\n      func.apply(this, args)\n    }, delay)\n  }\n}\n\n/**\n *\n * @param {String} loginState 登录模式\n */\nexport function getParseLoginState(loginState) {\n  let loginMode = ''\n  switch (loginState) {\n    case 'phone':\n      loginMode = '手机号'\n      break\n    case 'email':\n      loginMode = '邮箱'\n      break\n    default:\n      loginMode = '手机号'\n      break\n  }\n  return loginMode\n}\n\n/**\n * 根据不同登录方式,返回匹配对应的正则\n * @param {String} loginState 登录状态\n */\nexport function getMatchReg(loginState) {\n  switch (loginState) {\n    case 'phone':\n      return /^(?:(?:\\+|00)86)?1[3-9]\\d{9}$/\n    case 'email':\n      return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    default:\n      return ''\n  }\n}\n\n/**\n * 获取url参数\n * @param name 参数名\n */\nexport function getQueryObject(url) {\n  url = url == null ? window.location.href : url\n  const search = url.substring(url.lastIndexOf('?') + 1)\n  const obj = {}\n  const reg = /([^?&=]+)=([^?&=]*)/g\n  search.replace(reg, (rs, $1, $2) => {\n    const name = decodeURIComponent($1)\n    let val = decodeURIComponent($2)\n    val = String(val)\n    obj[name] = val\n    return rs\n  })\n  return obj\n}\n\n/**\n * 格式化时间\n * @param str\n * @returns {string}\n * {y}-{m}-{d} {h}:{i}:{s}\n */\nexport function parseTime(time, cFormat) {\n  if (!time || arguments.length === 0) return null\n  const format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}'\n  let date\n  if (typeof time === 'object') {\n    date = time\n  } else {\n    if (`${time}`.length === 10) time = parseInt(time, 10) * 1000\n    date = new Date(time)\n  }\n  const formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay(),\n  }\n  // eslint-disable-next-line camelcase\n  const time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {\n    let value = formatObj[key]\n    // Note: getDay() returns 0 on Sunday\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value]\n    }\n    if (result.length > 0 && value < 10) {\n      value = `0${value}`\n    }\n    return value || 0\n  })\n  // eslint-disable-next-line camelcase\n  return time_str\n}\n\n// export function getCity(id) {\n//   return address[id]\n// }\n"]},"metadata":{},"sourceType":"module"}