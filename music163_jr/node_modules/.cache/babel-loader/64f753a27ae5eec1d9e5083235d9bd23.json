{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { getSongDetail, getSongPlayUrl } from '@/service/player'; // 歌曲详情Action\n\nconst changeCurrentSongAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res\n}); // 当前歌曲索引Action\n\n\nconst changeSongIndexAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  currentSongIndex: res\n}); // 歌曲列表Action\n\n\nconst changePlayListAction = res => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList: res\n});\n\nexport const getSongDetailAction = id => {\n  return (dispatch, getState) => {\n    // 1、根据id查找palyList里是否有该歌曲\n    const playList = getState().player.playList;\n    const songIndex = playList.findIndex(song => song.id === id);\n\n    if (songIndex !== -1) {\n      // 2、找到歌曲\n      dispatch(changeSongIndexAction(songIndex));\n      dispatch(changeCurrentSongAction(playList[songIndex]));\n      dispatch(changeCurrentSongPlayUrlAction(id));\n    } else {\n      // 3、没找到歌曲\n      // 请求数据\n      getSongDetail(id).then(res => {\n        const song = res.songs && res.songs[0];\n        playList.push(song);\n        dispatch(changePlayListAction(playList));\n        let songIndex = playList.length - 1;\n        dispatch(changeSongIndexAction(songIndex));\n        dispatch(changeCurrentSongAction(playList[songIndex]));\n        dispatch(changeCurrentSongPlayUrlAction(id));\n      });\n    }\n  };\n}; // 歌曲音乐播放urlAction\n\nconst changeCurrentSongPlayUrlAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_PLAY_URL,\n  currentSongPlayUrl: res.data && res.data[0]\n});\n\nexport const getSongPlayUrlAction = id => {\n  return dispatch => {\n    getSongPlayUrl(id).then(res => {\n      dispatch(changeCurrentSongPlayUrlAction(res));\n    });\n  };\n}; // 更改播放顺序Action\n\nexport const changePlaySequenceAction = sequence => ({\n  type: actionType.CHANGE_PLAY_SEQUENCE,\n  sequence\n});","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/pages/player/store/actionCreator.js"],"names":["actionTypes","getSongDetail","getSongPlayUrl","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","changeSongIndexAction","CHANGE_CURRENT_SONG_INDEX","currentSongIndex","changePlayListAction","CHANGE_PLAY_LIST","playList","getSongDetailAction","id","dispatch","getState","player","songIndex","findIndex","song","changeCurrentSongPlayUrlAction","then","songs","push","length","CHANGE_CURRENT_SONG_PLAY_URL","currentSongPlayUrl","data","getSongPlayUrlAction","changePlaySequenceAction","sequence","actionType","CHANGE_PLAY_SEQUENCE"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAAQC,aAAR,EAAsBC,cAAtB,QAA2C,kBAA3C,C,CAEA;;AACA,MAAMC,uBAAuB,GAAGC,GAAG,KAAI;AACnCC,EAAAA,IAAI,EAACL,WAAW,CAACM,mBADkB;AAEnCC,EAAAA,WAAW,EAACH;AAFuB,CAAJ,CAAnC,C,CAIA;;;AACA,MAAMI,qBAAqB,GAAGJ,GAAG,KAAI;AACjCC,EAAAA,IAAI,EAACL,WAAW,CAACS,yBADgB;AAEjCC,EAAAA,gBAAgB,EAACN;AAFgB,CAAJ,CAAjC,C,CAIA;;;AACA,MAAMO,oBAAoB,GAAGP,GAAG,KAAI;AAChCC,EAAAA,IAAI,EAACL,WAAW,CAACY,gBADe;AAEhCC,EAAAA,QAAQ,EAACT;AAFuB,CAAJ,CAAhC;;AAKA,OAAO,MAAMU,mBAAmB,GAAIC,EAAD,IAAO;AACtC,SAAO,CAACC,QAAD,EAAUC,QAAV,KAAuB;AAC1B;AACA,UAAMJ,QAAQ,GAAGI,QAAQ,GAAGC,MAAX,CAAkBL,QAAnC;AACA,UAAMM,SAAS,GAAGN,QAAQ,CAACO,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAUA,EAArC,CAAlB;;AAEA,QAAGI,SAAS,KAAK,CAAC,CAAlB,EAAoB;AAChB;AACAH,MAAAA,QAAQ,CAACR,qBAAqB,CAACW,SAAD,CAAtB,CAAR;AACAH,MAAAA,QAAQ,CAACb,uBAAuB,CAACU,QAAQ,CAACM,SAAD,CAAT,CAAxB,CAAR;AACAH,MAAAA,QAAQ,CAACM,8BAA8B,CAACP,EAAD,CAA/B,CAAR;AAEH,KAND,MAMK;AACD;AACA;AACAd,MAAAA,aAAa,CAACc,EAAD,CAAb,CAAkBQ,IAAlB,CAAuBnB,GAAG,IAAI;AAC1B,cAAMiB,IAAI,GAAGjB,GAAG,CAACoB,KAAJ,IAAapB,GAAG,CAACoB,KAAJ,CAAU,CAAV,CAA1B;AACAX,QAAAA,QAAQ,CAACY,IAAT,CAAcJ,IAAd;AACAL,QAAAA,QAAQ,CAACL,oBAAoB,CAACE,QAAD,CAArB,CAAR;AACA,YAAIM,SAAS,GAAGN,QAAQ,CAACa,MAAT,GAAgB,CAAhC;AACAV,QAAAA,QAAQ,CAACR,qBAAqB,CAACW,SAAD,CAAtB,CAAR;AACAH,QAAAA,QAAQ,CAACb,uBAAuB,CAACU,QAAQ,CAACM,SAAD,CAAT,CAAxB,CAAR;AACAH,QAAAA,QAAQ,CAACM,8BAA8B,CAACP,EAAD,CAA/B,CAAR;AACH,OARD;AAUH;AACJ,GAzBD;AA0BH,CA3BM,C,CA6BP;;AACA,MAAMO,8BAA8B,GAAGlB,GAAG,KAAK;AAC3CC,EAAAA,IAAI,EAACL,WAAW,CAAC2B,4BAD0B;AAE3CC,EAAAA,kBAAkB,EAACxB,GAAG,CAACyB,IAAJ,IAAYzB,GAAG,CAACyB,IAAJ,CAAS,CAAT;AAFY,CAAL,CAA1C;;AAKA,OAAO,MAAMC,oBAAoB,GAAGf,EAAE,IAAG;AACrC,SAAOC,QAAQ,IAAI;AACfd,IAAAA,cAAc,CAACa,EAAD,CAAd,CAAmBQ,IAAnB,CAAyBnB,GAAD,IAAS;AAC7BY,MAAAA,QAAQ,CAACM,8BAA8B,CAAClB,GAAD,CAA/B,CAAR;AACH,KAFD;AAGH,GAJD;AAKH,CANM,C,CAQP;;AACA,OAAO,MAAM2B,wBAAwB,GAAIC,QAAD,KAAe;AACnD3B,EAAAA,IAAI,EAAE4B,UAAU,CAACC,oBADkC;AAEnDF,EAAAA;AAFmD,CAAf,CAAjC","sourcesContent":["import * as actionTypes from './actionTypes';\nimport {getSongDetail,getSongPlayUrl} from '@/service/player';\n\n// 歌曲详情Action\nconst changeCurrentSongAction = res =>({\n    type:actionTypes.CHANGE_CURRENT_SONG,\n    currentSong:res\n})\n// 当前歌曲索引Action\nconst changeSongIndexAction = res =>({\n    type:actionTypes.CHANGE_CURRENT_SONG_INDEX,\n    currentSongIndex:res\n})\n// 歌曲列表Action\nconst changePlayListAction = res =>({\n    type:actionTypes.CHANGE_PLAY_LIST,\n    playList:res\n})\n\nexport const getSongDetailAction = (id) =>{\n    return (dispatch,getState) => {\n        // 1、根据id查找palyList里是否有该歌曲\n        const playList = getState().player.playList;\n        const songIndex = playList.findIndex(song => song.id===id);\n        \n        if(songIndex !== -1){\n            // 2、找到歌曲\n            dispatch(changeSongIndexAction(songIndex));\n            dispatch(changeCurrentSongAction(playList[songIndex]));\n            dispatch(changeCurrentSongPlayUrlAction(id));\n\n        }else{\n            // 3、没找到歌曲\n            // 请求数据\n            getSongDetail(id).then(res => {\n                const song = res.songs && res.songs[0];\n                playList.push(song);\n                dispatch(changePlayListAction(playList));\n                let songIndex = playList.length-1;\n                dispatch(changeSongIndexAction(songIndex));\n                dispatch(changeCurrentSongAction(playList[songIndex]));\n                dispatch(changeCurrentSongPlayUrlAction(id));\n            });\n\n        }\n    }\n}\n\n// 歌曲音乐播放urlAction\nconst changeCurrentSongPlayUrlAction = res => ({\n    type:actionTypes.CHANGE_CURRENT_SONG_PLAY_URL,\n    currentSongPlayUrl:res.data && res.data[0]\n})\n\nexport const getSongPlayUrlAction = id =>{\n    return dispatch => {\n        getSongPlayUrl(id).then((res) => {\n            dispatch(changeCurrentSongPlayUrlAction(res));\n        });\n    }\n}\n\n// 更改播放顺序Action\nexport const changePlaySequenceAction = (sequence) => ({\n    type: actionType.CHANGE_PLAY_SEQUENCE,\n    sequence,\n})\n"]},"metadata":{},"sourceType":"module"}