{"ast":null,"code":"var _jsxFileName = \"/Users/jr/myWeb/React\\u9879\\u76EE\\u5B9E\\u6218/music163_jr/src/pages/player/app-player-bar/index.js\",\n    _s = $RefreshSig$();\n\nimport { PlayerbarWrapper, PlayerInfo, Control, Operator } from './style';\nimport { Slider, Tooltip } from 'antd';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useEffect, useState, useRef } from 'react';\nimport { getSongDetailAction, getSongPlayUrlAction, changePlaySequenceAction, changeCurrentIndexAndSongAction } from '../store/actionCreator';\nimport { getSizeImage, formatDate } from '@/utils/format-utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppPlayerBar() {\n  _s();\n\n  // console.log('AppPlayerBar组件渲染');\n  // 获取store中的数据\n  const {\n    currentSong,\n    currentSongPlayUrl,\n    playSequence,\n    playListCount,\n    lyricList,\n    currentLyricIndex\n  } = useSelector(state => ({\n    currentSong: state.player.currentSong,\n    currentSongPlayUrl: state.player.currentSongPlayUrl,\n    playSequence: state.player.playSequence,\n    playListCount: state.player.playListCount,\n    lyricList: state.player.lyricList,\n    currentLyricIndex: state.player.currentLyricIndex\n  }), shallowEqual); // 组件内state\n\n  const [isPlaying, setIsPlaying] = useState(false); // 是否正在播放\n\n  const [currentTime, setCurrentTime] = useState(0); // 当前播放的时间\n\n  const [progress, setProgress] = useState(0); // 滑动条进度\n\n  const [isChanging, setIsChanging] = useState(false); // 是否正在滑动\n  // const [songId, setSongId] = useState(); // 是否正在滑动\n  //发送网络请求，请求歌曲详情\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // console.log('请求歌曲详情');\n    dispatch(getSongDetailAction(167860));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  // 判断当前是否拿到currentSong的数据（第一次渲染还未拿到异步数据）\n\n  const picUrl = currentSong.al && currentSong.al.picUrl; // 图片url\n\n  const songName = currentSong.name; // 歌曲名字\n\n  const singerName = currentSong.ar && currentSong.ar[0].name; //作者名字\n\n  const duration = currentSong.dt; //播放总时间\n\n  const songPlayUrl = currentSongPlayUrl && currentSongPlayUrl.url; //音乐播放URL\n  // 利用ref获取DOM元素\n\n  const audioRef = useRef();\n  /***** 设置音频src ****/\n\n  useEffect(() => {\n    // console.log('设置音频******');\n    if (currentSong.id) {\n      dispatch(getSongPlayUrlAction(currentSong.id)); // 设置音量\n\n      audioRef.current.volume = 0.3;\n    }\n  }, [currentSong]); // eslint-disable-line react-hooks/exhaustive-deps\n  // 切换歌曲时播放音乐\n\n  useEffect(() => {\n    isPlaying && audioRef.current.play();\n  }, [isPlaying]);\n  /***** 点击播放/暂停音乐 ****/\n\n  function playMusic() {\n    // 更改状态\n    setIsPlaying(!isPlaying);\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\n  }\n  /***** 音乐播放时更新歌曲播放时间currentTime、slider进程 ****/\n\n\n  function timeUpdate(e) {\n    let currentTime = e.target.currentTime;\n\n    if (!isChanging) {\n      // console.log('音乐播放时更新歌曲播放时间currentTime、slider进程');\n      setCurrentTime(currentTime * 1000);\n      setProgress(currentTime * 1000 / duration * 100);\n    } // 获取当前播放歌词\n\n\n    let i = 0; //用于获取歌词的索引\n\n    for (; i < lyricList.length; i++) {\n      if (currentTime * 1000 < item.totalTime) {\n        break;\n      }\n    } // 如果index没有改变,就不进行dispatch(对dispatch进行优化)\n\n\n    if (currentLyricIndex !== i - 1) {\n      dispatch(changeCurrentLyricIndexAction(i - 1));\n    }\n  }\n  /***** 当前歌曲播放结束后 ****/\n\n\n  function handleTimeEnd() {\n    // 单曲循环\n    if (playSequence === 2) {\n      audioRef.current.currentTime = 0;\n      audioRef.current.play();\n    } else {\n      // 播放下一首\n      dispatch(changeCurrentIndexAndSongAction(1));\n      setIsPlaying(false);\n    }\n  }\n  /***** 滑动滑块时触发 ****/\n\n\n  function sliderChange(value) {\n    // console.log('滑动滑块时更新currentTime、slider进程');\n    setIsChanging(true);\n    const currentTime = value / 100 * duration;\n    setCurrentTime(currentTime);\n    setProgress(value);\n  }\n  /***** 手指抬起时触发 ****/\n\n\n  function slideAfterChange(value) {\n    // console.log('手指抬起时更新audio的currentTime');\n    setIsChanging(false);\n    const currentTime = value / 100 * duration / 1000;\n    audioRef.current.currentTime = currentTime;\n  }\n  /***** 切换歌曲(点击播放下一首或上一首音乐) ****/\n\n\n  function changeSong(tag) {\n    // 首先判断播放列表中是否存在音乐，再决定是否播放\n    if (playListCount < 1) {\n      return;\n    }\n\n    dispatch(changeCurrentIndexAndSongAction(tag));\n    setIsPlaying(false); // 更改播放状态图标\n  }\n  /***** 更改播放顺序 ****/\n\n\n  function changeSequence() {\n    let currentSequence = playSequence;\n    ++currentSequence;\n\n    if (currentSequence > 2) {\n      currentSequence = 0;\n    } // console.log();\n\n\n    dispatch(changePlaySequenceAction(currentSequence));\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerbarWrapper, {\n    className: \"sprite_player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Control, {\n        isPlaying: isPlaying,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_player pre\",\n          onClick: () => {\n            changeSong(-1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_player play\",\n          onClick: playMusic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_player next\",\n          onClick: () => {\n            changeSong(1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#/discover/song\",\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: getSizeImage(picUrl, 35),\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"play-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"song-name\",\n              href: \"#/discover/song\",\n              children: songName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"song-author\",\n              href: \"#/author\",\n              children: singerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            value: progress,\n            onChange: sliderChange,\n            onAfterChange: slideAfterChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song-time\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"now-time\",\n              children: formatDate(currentTime, 'mm:ss')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total-time\",\n              children: [' ', \"/ \", duration && formatDate(duration, 'mm:ss')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Operator, {\n        playSequence: playSequence,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"\\u8C03\\u8282\\u97F3\\u91CF\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"sprite_player btn volume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: ['顺序播放', '随机播放', '单曲循环'].filter((item, index) => index === playSequence ? item : undefined),\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"sprite_player btn loop\",\n              onClick: changeSequence\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"\\u64AD\\u653E\\u5217\\u8868\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"sprite_player btn playlist\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: playListCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"audio\",\n      ref: audioRef,\n      src: songPlayUrl,\n      onTimeUpdate: timeUpdate,\n      onEnded: handleTimeEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppPlayerBar, \"XMnbJfZsqHyc15WLdzA8CpAeJGA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AppPlayerBar;\nexport default AppPlayerBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppPlayerBar\");","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/pages/player/app-player-bar/index.js"],"names":["PlayerbarWrapper","PlayerInfo","Control","Operator","Slider","Tooltip","useDispatch","useSelector","shallowEqual","useEffect","useState","useRef","getSongDetailAction","getSongPlayUrlAction","changePlaySequenceAction","changeCurrentIndexAndSongAction","getSizeImage","formatDate","AppPlayerBar","currentSong","currentSongPlayUrl","playSequence","playListCount","lyricList","currentLyricIndex","state","player","isPlaying","setIsPlaying","currentTime","setCurrentTime","progress","setProgress","isChanging","setIsChanging","dispatch","picUrl","al","songName","name","singerName","ar","duration","dt","songPlayUrl","url","audioRef","id","current","volume","play","playMusic","pause","timeUpdate","e","target","i","length","item","totalTime","changeCurrentLyricIndexAction","handleTimeEnd","sliderChange","value","slideAfterChange","changeSong","tag","changeSequence","currentSequence","filter","index","undefined"],"mappings":"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","sourcesContent":["import {PlayerbarWrapper,PlayerInfo,Control,Operator} from './style';\nimport {Slider,Tooltip} from 'antd';\nimport {useDispatch,useSelector,shallowEqual} from 'react-redux';\nimport {useEffect,useState,useRef} from 'react';\nimport {getSongDetailAction,\n        getSongPlayUrlAction,\n        changePlaySequenceAction,\n        changeCurrentIndexAndSongAction} from '../store/actionCreator';\nimport {getSizeImage, formatDate} from '@/utils/format-utils.js';\n\nfunction AppPlayerBar(){\n    // console.log('AppPlayerBar组件渲染');\n\n    // 获取store中的数据\n    const {\n        currentSong,\n        currentSongPlayUrl,\n        playSequence,\n        playListCount,\n        lyricList,\n        currentLyricIndex\n            } = useSelector((state)=>({\n        currentSong: state.player.currentSong,\n        currentSongPlayUrl: state.player.currentSongPlayUrl,\n        playSequence:state.player.playSequence,\n        playListCount:state.player.playListCount,\n        lyricList:state.player.lyricList,\n        currentLyricIndex:state.player.currentLyricIndex\n    }),shallowEqual); \n\n    // 组件内state\n    const [isPlaying,setIsPlaying] = useState(false); // 是否正在播放\n    const [currentTime,setCurrentTime] = useState(0);  // 当前播放的时间\n    const [progress,setProgress] = useState(0);  // 滑动条进度\n    const [isChanging, setIsChanging] = useState(false); // 是否正在滑动\n    // const [songId, setSongId] = useState(); // 是否正在滑动\n\n\n    //发送网络请求，请求歌曲详情\n    const dispatch = useDispatch();\n    useEffect(()=>{\n        // console.log('请求歌曲详情');\n        dispatch(getSongDetailAction(167860));\n    },[]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n    // 判断当前是否拿到currentSong的数据（第一次渲染还未拿到异步数据）\n    const picUrl = currentSong.al && currentSong.al.picUrl; // 图片url\n    const songName = currentSong.name; // 歌曲名字\n    const singerName = currentSong.ar && currentSong.ar[0].name; //作者名字\n    const duration = currentSong.dt; //播放总时间\n    const songPlayUrl = currentSongPlayUrl && currentSongPlayUrl.url; //音乐播放URL\n    \n    // 利用ref获取DOM元素\n    const audioRef = useRef();\n\n\n    /***** 设置音频src ****/\n    useEffect(()=>{\n        // console.log('设置音频******');\n        if(currentSong.id){\n            dispatch(getSongPlayUrlAction(currentSong.id));\n            // 设置音量\n            audioRef.current.volume = 0.3;\n        }\n    },[currentSong]);// eslint-disable-line react-hooks/exhaustive-deps\n\n    // 切换歌曲时播放音乐\n    useEffect(() => {\n        isPlaying && audioRef.current.play();\n    }, [isPlaying]);\n\n\n    /***** 点击播放/暂停音乐 ****/\n    function playMusic(){\n        // 更改状态\n        setIsPlaying(!isPlaying);\n        isPlaying ? audioRef.current.pause() : audioRef.current.play();\n    }\n\n    /***** 音乐播放时更新歌曲播放时间currentTime、slider进程 ****/\n    function timeUpdate(e){\n        let currentTime = e.target.currentTime;\n        if(!isChanging){\n            // console.log('音乐播放时更新歌曲播放时间currentTime、slider进程');\n            setCurrentTime(currentTime*1000);\n            setProgress(((currentTime * 1000) / duration) * 100);   \n        }     \n\n        // 获取当前播放歌词\n        let i = 0; //用于获取歌词的索引\n        for (; i < lyricList.length; i++){\n            if (currentTime * 1000 < item.totalTime) {\n                break;\n            }\n        }\n        // 如果index没有改变,就不进行dispatch(对dispatch进行优化)\n        if (currentLyricIndex !== i - 1) {\n            dispatch(changeCurrentLyricIndexAction(i - 1));\n        }\n\n\n    }\n\n    /***** 当前歌曲播放结束后 ****/\n    function handleTimeEnd(){\n        // 单曲循环\n        if (playSequence === 2) {\n            audioRef.current.currentTime = 0;\n            audioRef.current.play();\n        }else{\n            // 播放下一首\n            dispatch(changeCurrentIndexAndSongAction(1));\n            setIsPlaying(false);\n        }\n    }\n\n    /***** 滑动滑块时触发 ****/\n    function sliderChange(value){\n        // console.log('滑动滑块时更新currentTime、slider进程');\n        setIsChanging(true);\n        const currentTime = (value / 100) * duration;\n        setCurrentTime(currentTime);\n        setProgress(value);\n\n    }\n    /***** 手指抬起时触发 ****/\n    function slideAfterChange(value){\n        // console.log('手指抬起时更新audio的currentTime');\n        setIsChanging(false);\n        const currentTime = ((value / 100) * duration) / 1000;\n        audioRef.current.currentTime = currentTime;\n    }\n\n    /***** 切换歌曲(点击播放下一首或上一首音乐) ****/\n    function changeSong(tag){\n        // 首先判断播放列表中是否存在音乐，再决定是否播放\n        if (playListCount < 1) {\n            return;\n        }\n        dispatch(changeCurrentIndexAndSongAction(tag));\n        setIsPlaying(false); // 更改播放状态图标\n    }\n\n     /***** 更改播放顺序 ****/\n     function changeSequence(){\n        let currentSequence = playSequence;\n        ++currentSequence;\n        if (currentSequence > 2){\n            currentSequence = 0;\n        }\n        // console.log();\n        dispatch(changePlaySequenceAction(currentSequence));\n     }\n\n\n    \n    return (\n        <PlayerbarWrapper className='sprite_player'>\n            <div className='content'>\n                <Control isPlaying={isPlaying}>\n                    <button className='sprite_player pre' onClick={()=>{changeSong(-1)}}></button>\n                    <button className='sprite_player play' onClick={playMusic}></button>\n                    <button className='sprite_player next' onClick={()=>{changeSong(1)}}></button>\n                </Control>\n                <PlayerInfo>\n                    <a href='#/discover/song' className='image'>\n                        <img src={getSizeImage(picUrl, 35)} alt=''/>\n                    </a>\n                    <div className='play-detail'>\n                        <div className='song-info'>\n                            <a className='song-name' href='#/discover/song'>{songName}</a>\n                            <a className='song-author' href='#/author'>{singerName}</a>\n                        </div>\n                        <Slider\n                            value={progress}\n                            onChange={sliderChange}\n                            onAfterChange={slideAfterChange}\n                        />\n                        <div className='song-time'>\n                            <span className='now-time'>{formatDate(currentTime, 'mm:ss')}</span>\n                            <span className='total-time'>\n                                {' '}\n                                / {duration && formatDate(duration, 'mm:ss')}\n                            </span>\n                        </div>\n                    </div>\n                </PlayerInfo>\n                <Operator playSequence={playSequence}>\n                    {/* 左侧暂时不实现 */}\n                    <div className='left'></div>\n                    <div className='right'>\n                        <Tooltip title='调节音量'>\n                            <button className='sprite_player btn volume'></button>\n                        </Tooltip>\n                        <Tooltip\n                            title={['顺序播放','随机播放','单曲循环'].filter((item,index)=>(\n                                index === playSequence?item:undefined\n                            ))}\n                        >\n                            <button className='sprite_player btn loop' onClick={changeSequence}></button>\n                        </Tooltip>\n                        <Tooltip title='播放列表'>\n                            <button className='sprite_player btn playlist'>\n                                <span>{playListCount}</span>\n                            </button>\n                        </Tooltip>\n                    </div>\n                </Operator>\n            </div>\n            <audio\n                id=\"audio\"\n                ref={audioRef}\n                src={songPlayUrl}\n                onTimeUpdate={timeUpdate}\n                onEnded={handleTimeEnd}\n            />\n        </PlayerbarWrapper>\n    );\n}\n\nexport default AppPlayerBar;"]},"metadata":{},"sourceType":"module"}