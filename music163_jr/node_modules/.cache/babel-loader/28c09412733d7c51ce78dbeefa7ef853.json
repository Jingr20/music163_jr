{"ast":null,"code":"var _jsxFileName = \"/Users/jr/myWeb/React\\u9879\\u76EE\\u5B9E\\u6218/music163_jr/src/pages/player/app-player-bar/c-cpns/slider-playlist/index.js\",\n    _s = $RefreshSig$();\n\nimport { SliderPlaylistWrapper, SliderPlaylistHeader, SliderPlaylistMain } from './style';\nimport { ClearOutlined, CloseOutlined, HeartOutlined } from '@ant-design/icons';\nimport { changePlaylistAndCount, getSongDetailAction, changePlayListAction } from '../../../store/actionCreator';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useRef } from 'react';\nimport PlaylistItem from './c-cpns/playlist-item';\nimport LyricContent from './c-cpns/lyric-content';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SliderPlaylist(props) {\n  _s();\n\n  // 获取父组件的传值\n  const {\n    isShowSlider,\n    playlistCount,\n    closeWindow,\n    playMusic,\n    changeSong\n  } = props; // 获取store中的数据\n\n  const {\n    currentSong,\n    playList,\n    currentSongIndex\n  } = useSelector(state => ({\n    playList: state.player.playList,\n    currentSong: state.player.currentSong,\n    currentSongIndex: state.player.currentSongIndex\n  }));\n  const dispatch = useDispatch();\n  const playlistRef = useRef(); // 清除全部歌曲\n\n  function clearAllPlaylist(e) {\n    e.preventDefault();\n    playList.splice(0, playList.length);\n    dispatch(changePlaylistAndCount(playList));\n  }\n\n  return /*#__PURE__*/_jsxDEV(SliderPlaylistWrapper, {\n    style: {\n      visibility: isShowSlider ? 'visible' : 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(SliderPlaylistHeader, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"header-title\",\n          children: [\"\\u64AD\\u653E\\u5217\\u8868(\", playlistCount, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/#\",\n            className: \"header-icon\",\n            onClick: e => e.preventDefault(),\n            children: [/*#__PURE__*/_jsxDEV(HeartOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u6536\\u85CF\\u4E00\\u4E0B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/#\",\n            onClick: e => clearAllPlaylist(e),\n            className: \"header-icon\",\n            children: [/*#__PURE__*/_jsxDEV(ClearOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u6E05\\u9664\\u64AD\\u653E\\u5217\\u8868\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"song-name\",\n          children: currentSong.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"close-window\",\n          onClick: closeWindow,\n          children: /*#__PURE__*/_jsxDEV(CloseOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 73\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SliderPlaylistMain, {\n      ref: playlistRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-playlist\",\n        children: playList && playList.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(PlaylistItem, {\n            isActive: (currentSongIndex ? currentSongIndex : 0) === index ? 'active' : '',\n            songName: item.name,\n            singer: item.ar[0].name,\n            clickItem: () => {\n              dispatch(getSongDetailAction(item.id));\n            },\n            songId: item.id,\n            nextMusic: () => changeSong(1),\n            duration: item.dt\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SliderPlaylist, \"euhdwB0XWAa9rdLIt3FXP5X0rgo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SliderPlaylist;\nexport default SliderPlaylist;\n\nvar _c;\n\n$RefreshReg$(_c, \"SliderPlaylist\");","map":{"version":3,"sources":["/Users/jr/myWeb/React项目实战/music163_jr/src/pages/player/app-player-bar/c-cpns/slider-playlist/index.js"],"names":["SliderPlaylistWrapper","SliderPlaylistHeader","SliderPlaylistMain","ClearOutlined","CloseOutlined","HeartOutlined","changePlaylistAndCount","getSongDetailAction","changePlayListAction","useSelector","useDispatch","useRef","PlaylistItem","LyricContent","SliderPlaylist","props","isShowSlider","playlistCount","closeWindow","playMusic","changeSong","currentSong","playList","currentSongIndex","state","player","dispatch","playlistRef","clearAllPlaylist","e","preventDefault","splice","length","visibility","name","map","item","index","ar","id","dt"],"mappings":"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","sourcesContent":["import {SliderPlaylistWrapper,SliderPlaylistHeader,SliderPlaylistMain} from './style';\nimport { ClearOutlined, CloseOutlined, HeartOutlined } from '@ant-design/icons';\nimport {\n    changePlaylistAndCount,\n    getSongDetailAction,\n    changePlayListAction\n} from '../../../store/actionCreator';\nimport {useSelector,useDispatch} from 'react-redux';\nimport {useRef} from 'react';\nimport PlaylistItem from './c-cpns/playlist-item';\nimport LyricContent from './c-cpns/lyric-content';\n\n\nfunction SliderPlaylist(props){\n\n    // 获取父组件的传值\n    const {\n        isShowSlider,\n        playlistCount,\n        closeWindow,\n        playMusic,\n        changeSong,\n    } = props;\n\n    // 获取store中的数据\n    const { currentSong, playList, currentSongIndex } = useSelector(state => ({\n        playList: state.player.playList,\n        currentSong: state.player.currentSong,\n        currentSongIndex: state.player.currentSongIndex\n    }))\n\n    const dispatch = useDispatch()\n    const playlistRef = useRef()\n\n\n    // 清除全部歌曲\n    function clearAllPlaylist(e){\n        e.preventDefault();\n        playList.splice(0, playList.length);\n        dispatch(changePlaylistAndCount(playList));\n    }\n\n\n    return (\n        <SliderPlaylistWrapper\n            style={{ visibility: isShowSlider ? 'visible' : 'hidden' }}\n        >\n            <SliderPlaylistHeader>\n                <div className=\"playlist-header-left\">\n                    <h3 className=\"header-title\">播放列表({playlistCount})</h3>\n                    <div>\n                        <a href='/#' className='header-icon' onClick={(e) => e.preventDefault()}>\n                            <HeartOutlined/>\n                            <span>收藏一下</span>\n                        </a>\n                        <a href=\"/#\" onClick={(e) => clearAllPlaylist(e)} className=\"header-icon\">\n                            <ClearOutlined />\n                            <span>清除播放列表</span>\n                        </a>\n                    </div>\n                </div>\n                <div className='playlist-header-right'>\n                    <div className=\"song-name\">{currentSong.name}</div>\n                    <div className=\"close-window\" onClick={closeWindow}><CloseOutlined /></div>\n                    \n                </div>\n            </SliderPlaylistHeader>\n            <SliderPlaylistMain ref={playlistRef}>\n                <div className='main-playlist'>\n                    {\n                        playList &&\n                        playList.map((item,index)=>{\n                            return (\n                                <PlaylistItem\n                                    key={item.id}\n                                    isActive={\n                                        (currentSongIndex ? currentSongIndex : 0) === index? 'active': ''\n                                    }\n                                    songName={item.name}\n                                    singer={item.ar[0].name}\n                                    clickItem={() => {dispatch(getSongDetailAction(item.id))}}\n                                    songId={item.id}\n                                    nextMusic={() => changeSong(1)}\n                                    duration = {item.dt}\n                                />\n                            )\n                        })\n                    }\n                </div>\n                \n            </SliderPlaylistMain>\n        </SliderPlaylistWrapper>\n    );\n}\n\nexport default SliderPlaylist;"]},"metadata":{},"sourceType":"module"}